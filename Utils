package com.huawei.it.cic.email.utils;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Collection;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.activation.DataSource;

import org.apache.commons.io.FileUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.google.common.base.Ascii;
import com.huawei.it.jalor5.core.log.ILogger;
import com.huawei.it.jalor5.core.log.JalorLoggerFactory;


public class Utils {
	private final static ILogger LOGGER = JalorLoggerFactory.getLogger(Utils.class);
	
	/**
	 * return true if the <code>key</code> is null or empty
	 * @author yWX427833
	 * @since 2017年5月10日
	 * @param key
	 * @return
	 */
	public static boolean isNull(String str){
		return str == null || str.isEmpty();
	}
	
	
	public static final String EXCEL_XLS_POSTFIX = "xls";
	public static final String EXCEL_XLSX_POSTFIX = "xlsx";
	public static final String EXCEL_XLT_POSTFIX = "xlt";
	/**
	 * 判断是否是Excel,或者文件不存在	
	 * @author yWX427833
	 * @since 2017年5月20日
	 * @param path
	 * @return
	 */
	public static boolean isExcel(DataSource ds) {
		try{
			String path = ds.getName();
			int point = path.lastIndexOf(".");
			String postfix = path.substring(point+1);
			postfix = postfix.toLowerCase();
			switch (postfix) {
				case EXCEL_XLS_POSTFIX: 
//					try {
//						new HSSFWorkbook(ds.getInputStream());
//					} catch (IOException e) {
//						return false;
//					}
//					break; 
				case EXCEL_XLSX_POSTFIX: 
//					try {
//						new XSSFWorkbook(ds.getInputStream());
//					} catch (IOException e) {
//						return false;
//					}
//					break;
				case EXCEL_XLT_POSTFIX:
//					try{
//						new HSSFWorkbook(new POIFSFileSystem(ds.getInputStream()));
//					}catch (IOException e) {
//						return false;
//					}
					return true;
			default:
				break;
			}
		}catch(Exception e){
			// ignore it
		}
		return false;
	}
	
	/**
	 * 判断是否是Excel
	 * @author yWX427833
	 * @since 2017年5月20日
	 * @param in
	 * @return
	 */
	public static boolean isExcel(InputStream in){
		try {
			new HSSFWorkbook(in);
		} catch (IOException e) {
			try {
				new XSSFWorkbook(in);
			} catch (IOException e1) {
				return false;
			}
		}
		return true;
	}
	
	/**
     * Asynchronized Copies bytes from an {@link InputStream} <code>source</code> to a file
     * <code>destination</code>. The directories up to <code>destination</code>
     * will be created if they don't already exist. <code>destination</code>
     * will be overwritten if it already exists.
     * The {@code source} stream is closed.
     * See {@link #copyToFile(InputStream, File)} for a method that does not close the input stream.
     *
     * @param source      the <code>InputStream</code> to copy bytes from, must not be {@code null}, will be closed
     * @param destination the non-directory <code>File</code> to write bytes to
     *                    (possibly overwriting), must not be {@code null}
     */
	public static void copyInputStream2File(final InputStream source, final File destination) {
		new Thread(new Runnable() {
			@Override
			public void run() {
				try {
					FileUtils.copyInputStreamToFile(source, destination);
				} catch (IOException e) {
					LOGGER.error("附件异步下载失败，ERROR ", e);
				}
			}
		}).start();
	}
	
	/**
	 * Asynchronized Copies	
	 * @author yWX427833
	 * @since 2017年5月20日
	 * @param url
	 * @param destination
	 */
	public static void copyURLToFile(final String url, final File destination){
		new Thread(new Runnable() {
			@Override
			public void run() {
				try {
					FileUtils.copyURLToFile(new URL(url), destination);
				} catch (IOException e) {
					LOGGER.error("邮件图片图片异步下载失败，ERROR ", e);
				}
			}
		}).start();
	}
	
	
	@SuppressWarnings("rawtypes")
	public static boolean isEmpty(Object obj){
		if(obj instanceof Collection){
			return obj == null || ((Collection)obj).isEmpty(); 
		}else{
			return obj == null || ((Object[])obj).length == 0; 
		}
	}
	
	public static String combine(Collection<String> array,String reg){
		String result = "";
		int i = 0; 
		for(String str : array){
			if(i < array.size() -1)
				result += str + reg;
			else{
				result += str;
			}
			i++;
		}
		return result;
	}
	
	/**
	   * 过滤特殊字符 
	   * @param s
	   * @return
	   */
	public static String String2Json(String s) {
			StringBuffer sb = new StringBuffer();
			Pattern pattern = Pattern.compile("(\\\\)+(\0)");
			Matcher matcher = pattern.matcher(s);
			s = matcher.replaceAll(" ");
			char[] array = s.toCharArray();
			for (int i = 0; i < array.length; i++) {
				char c = array[i];
				switch (c) {
				case Ascii.NUL :
					sb.append(" ");
					break;
				default:
					if ((c >= 0 && c <= 31) || c == 127)// 在ASCⅡ码中，第0～31号及第127号(共33个)是控制字符或通讯专用字符
					{
		
					} else {
						sb.append(c);
					}
					break;
				}
			}
			return sb.toString();
	}
	
}
